// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package repository

import (
	"context"
)

const dbVersion = `-- name: DbVersion :one
select version()
`

func (q *Queries) DbVersion(ctx context.Context) (string, error) {
	row := q.db.QueryRow(ctx, dbVersion)
	var version string
	err := row.Scan(&version)
	return version, err
}

const getBuyerByEmail = `-- name: GetBuyerByEmail :one
select
    "user".uid,
    email,
    name,
    passhash
from
    "user"
inner join buyer on
    "user".uid = buyer.uid
where
    email like $1
limit 1
`

type GetBuyerByEmailRow struct {
	Uid      int32
	Email    string
	Name     string
	Passhash string
}

func (q *Queries) GetBuyerByEmail(ctx context.Context, email string) (GetBuyerByEmailRow, error) {
	row := q.db.QueryRow(ctx, getBuyerByEmail, email)
	var i GetBuyerByEmailRow
	err := row.Scan(
		&i.Uid,
		&i.Email,
		&i.Name,
		&i.Passhash,
	)
	return i, err
}

const getBuyerById = `-- name: GetBuyerById :one
select
    "user".uid,
    email,
    name,
    passhash
from
    "user"
inner join buyer on
    "user".uid = buyer.uid
where
    "user".uid = $1
limit 1
`

type GetBuyerByIdRow struct {
	Uid      int32
	Email    string
	Name     string
	Passhash string
}

func (q *Queries) GetBuyerById(ctx context.Context, uid int32) (GetBuyerByIdRow, error) {
	row := q.db.QueryRow(ctx, getBuyerById, uid)
	var i GetBuyerByIdRow
	err := row.Scan(
		&i.Uid,
		&i.Email,
		&i.Name,
		&i.Passhash,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select uid, email, passhash from "user" where email like $1 limit 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(&i.Uid, &i.Email, &i.Passhash)
	return i, err
}

const getUserById = `-- name: GetUserById :one
select uid, email, passhash from "user" where uid = $1 limit 1
`

func (q *Queries) GetUserById(ctx context.Context, uid int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, uid)
	var i User
	err := row.Scan(&i.Uid, &i.Email, &i.Passhash)
	return i, err
}

const insertBuyer = `-- name: InsertBuyer :exec
insert into buyer (uid, name) values ($1, $2)
`

type InsertBuyerParams struct {
	Uid  int32
	Name string
}

func (q *Queries) InsertBuyer(ctx context.Context, arg InsertBuyerParams) error {
	_, err := q.db.Exec(ctx, insertBuyer, arg.Uid, arg.Name)
	return err
}

const insertUser = `-- name: InsertUser :one
insert into "user" (email, passhash) values ($1, $2) returning uid
`

type InsertUserParams struct {
	Email    string
	Passhash string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.Email, arg.Passhash)
	var uid int32
	err := row.Scan(&uid)
	return uid, err
}
