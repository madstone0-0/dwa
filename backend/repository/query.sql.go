// Code generated by sqlc. DO NOT EDIT.
// This header informs developers that this file was auto-generated by sqlc and should not be manually modified
// versions:
//   sqlc v1.29.0
// Indicates the version of sqlc used to generate this code
// source: query.sql
// Shows the SQL file that was used as input to generate this code

package repository


import (
	"context"
	

	"github.com/jackc/pgx/v5/pgtype"
	
)

const AddToCart = `-- name: AddToCart :exec
insert into cart (bid, iid, vid, quantity) values($1, $2, $3, $4)
`
// Defines a constant containing the SQL query to add an item to a cart
// The :exec annotation indicates this query doesn't return rows

type AddToCartParams struct {
	Bid      pgtype.UUID `json:"bid"`      
	Iid      pgtype.UUID `json:"iid"`      
	Vid      pgtype.UUID `json:"vid"`      
	Quantity int32       `json:"quantity"`

// Defines a struct to hold parameters for the AddToCart function

func (q *Queries) AddToCart(ctx context.Context, arg AddToCartParams) error {
	// Method that adds an item to a cart
	// Takes a context and AddToCartParams struct as arguments
	// Returns an error or nil if successful
	_, err := q.db.Exec(ctx, AddToCart,
		arg.Bid,
		arg.Iid,      
		arg.Vid,      
		arg.Quantity, 
	)
	return err 
}

const ClearCart = `-- name: ClearCart :exec
delete from cart where bid = $1
`
// Defines a constant containing the SQL query to clear all items from a cart
// The :exec annotation indicates this query doesn't return rows

func (q *Queries) ClearCart(ctx context.Context, bid pgtype.UUID) error {
	// Method that clears all items from a cart for a specific buyer
	// Takes a context and buyer ID as arguments
	// Returns an error or nil if successful
	_, err := q.db.Exec(ctx, ClearCart, bid)
	return err 
}

const CreateTransaction = `-- name: CreateTransaction :one
insert into transaction (bid, vid, iid, amt, qty_bought, t_time) values($1, $2, $3, $4, $5, now()) returning tid
`
// Defines a constant containing the SQL query to create a transaction
// The :one annotation indicates this query returns a single row

type CreateTransactionParams struct {
	Bid       pgtype.UUID    `json:"bid"`
	Vid       pgtype.UUID    `json:"vid"`       
	Iid       pgtype.UUID    `json:"iid"`
	Amt       pgtype.Numeric `json:"amt"`       
	QtyBought int32          `json:"qty_bought"` 
}
// Defines a struct to hold parameters for the CreateTransaction function

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (pgtype.UUID, error) {
	// Method that creates a transaction and returns the transaction ID
	// Takes a context and CreateTransactionParams struct as arguments
	// Returns a transaction ID (UUID) and error or nil if successful
	row := q.db.QueryRow(ctx, CreateTransaction,
		arg.Bid,
		arg.Vid,       /
		arg.Iid,
		arg.Amt,       
		arg.QtyBought, 
	)
	var tid pgtype.UUId 
	err := row.Scan(&tid)
	return tid, err /
}

const DbVersion = `-- name: DbVersion :one
select version()
`
// Defines a constant containing the SQL query to get the database version
// The :one annotation indicates this query returns a single row

func (q *Queries) DbVersion(ctx context.Context) (string, error) {
	// Method that gets the database version
	// Takes a context as argument
	// Returns the version as a string and error or nil if successful
	row := q.db.QueryRow(ctx, DbVersion)
	var version string 
	err := row.Scan(&version)
	return version, err 
}

const DeleteCartItem = `-- name: DeleteCartItem :exec
delete from cart where bid = $1 and iid = $2 and vid = $3
`
// Defines a constant containing the SQL query to delete a specific item from a cart
// The :exec annotation indicates this query doesn't return rows

type DeleteCartItemParams struct {
	Bid pgtype.UUID `json:"bid"` 
	Iid pgtype.UUID `json:"iid"` 
	Vid pgtype.UUID `json:"vid"`

// Defines a struct to hold parameters for the DeleteCartItem function

func (q *Queries) DeleteCartItem(ctx context.Context, arg DeleteCartItemParams) error {
	// Method that deletes a specific item from a cart
	// Takes a context and DeleteCartItemParams struct as arguments
	// Returns an error or nil if successful
	_, err := q.db.Exec(ctx, DeleteCartItem, arg.Bid, arg.Iid, arg.Vid)
	return err 
}

const DeleteItem = `-- name: DeleteItem :exec
delete from item where iid = $1
`
// Defines a constant containing the SQL query to delete an item
// The :exec annotation indicates this query doesn't return rows

func (q *Queries) DeleteItem(ctx context.Context, iid pgtype.UUID) error {
	// Method that deletes an item
	// Takes a context and item ID as arguments
	// Returns an error or nil if successful
	_, err := q.db.Exec(ctx, DeleteItem, iid)
	return err 

const DeleteUser = `-- name: DeleteUser :exec
delete from "user" where uid = $1
`
// Defines a constant containing the SQL query to delete a user
// The :exec annotation indicates this query doesn't return rows
// Note: "user" is in quotes because it's a reserved keyword in PostgreSQL

func (q *Queries) DeleteUser(ctx context.Context, uid pgtype.UUID) error {
	// Method that deletes a user
	// Takes a context and user ID as arguments
	// Returns an error or nil if successful
	_, err := q.db.Exec(ctx, DeleteUser, uid) 
	return err 
}

const GetAllItems = `-- name: GetAllItems :many
select iid, vid, name, pictureurl, description, category, quantity, cost from "item"
`
// Defines a constant containing the SQL query to get all items
// The :many annotation indicates this query returns multiple rows

func (q *Queries) GetAllItems(ctx context.Context) ([]Item, error) {
	// Method that gets all items
	// Takes a context as argument
	// Returns a slice of Item structs and error or nil if successful
	rows, err := q.db.Query(ctx, GetAllItems) 
	if err != nil {
		return nil, err 
	}
	defer rows.Close()
	items := []Item{} 
	for rows.Next() { 
		var i Item 
		if err := rows.Scan(
			&i.Iid,         
			&i.Vid,       
			&i.Name,
			&i.Pictureurl,  
			&i.Description, 
			&i.Category,    
			&i.Quantity,    
			&i.Cost,        
		); err != nil {
			return nil, err 
		}
		items = append(items, i) 
	}
	if err := rows.Err(); err != nil {
		return nil, err 
	}
	return items, nil 
}

const GetBuyerByEmail = `-- name: GetBuyerByEmail :one
select
    "user".uid,
    email,
    name,
    passhash
from
    "user"
inner join buyer on
    "user".uid = buyer.uid
where
    email like $1
limit 1
`
// Defines a constant containing the SQL query to get a buyer by email
// The :one annotation indicates this query returns a single row
// The query joins the user and buyer tables

type GetBuyerByEmailRow struct {
	Uid      pgtype.UUID `json:"uid"`      
	Email    string      `json:"email"`   
	Name     string      `json:"name"`     
	Passhash string      `json:"passhash"`
}
// Defines a struct to hold the row returned by the GetBuyerByEmail function

func (q *Queries) GetBuyerByEmail(ctx context.Context, email string) (GetBuyerByEmailRow, error) {
	// Method that gets a buyer by email
	// Takes a context and email as arguments
	// Returns a GetBuyerByEmailRow struct and error or nil if successful
	row := q.db.QueryRow(ctx, GetBuyerByEmail, email)
	var i GetBuyerByEmailRow 
	err := row.Scan(
		&i.Uid,
		&i.Email,   
		&i.Name,
		&i.Passhash, 
	)
	return i, err
}

const GetBuyerById = `-- name: GetBuyerById :one
select
    "user".uid,
    email,
    name,
    passhash
from
    "user"
inner join buyer on
    "user".uid = buyer.uid
where
    "user".uid = $1
limit 1
`
// Defines a constant containing the SQL query to get a buyer by ID
// The :one annotation indicates this query returns a single row
// The query joins the user and buyer tables

type GetBuyerByIdRow struct {
	Uid      pgtype.UUID `json:"uid"`      
	Email    string      `json:"email"`    
	Name     string      `json:"name"`     
	Passhash string      `json:"passhash"` 
}
// Defines a struct to hold the row returned by the GetBuyerById function

func (q *Queries) GetBuyerById(ctx context.Context, uid pgtype.UUID) (GetBuyerByIdRow, error) {
	// Method that gets a buyer by ID
	// Takes a context and user ID as arguments
	// Returns a GetBuyerByIdRow struct and error or nil if successful
	row := q.db.QueryRow(ctx, GetBuyerById, uid) 
	var i GetBuyerByIdRow 
	err := row.Scan(
		&i.Uid,     
		&i.Email,   
		&i.Name,    
		&i.Passhash, 
	)
	return i, err // Returns the row and any error that occurred
}

const GetCartItem = `-- name: GetCartItem :one
select bid, iid, vid from cart
where bid = $1 and iid = $2 and vid = $3
`
// Defines a constant containing the SQL query to get a specific cart item
// The :one annotation indicates this query returns a single row

type GetCartItemParams struct {
	Bid pgtype.UUID `json:"bid"` 
	Iid pgtype.UUID `json:"iid"` 
	Vid pgtype.UUID `json:"vid"` 
}
// Defines a struct to hold parameters for the GetCartItem function

type GetCartItemRow struct {
	Bid pgtype.UUID `json:"bid"` 
	Iid pgtype.UUID `json:"iid"` 
	Vid pgtype.UUID `json:"vid"` 
}
// Defines a struct to hold the row returned by the GetCartItem function

func (q *Queries) GetCartItem(ctx context.Context, arg GetCartItemParams) (GetCartItemRow, error) {
	// Method that gets a specific cart item
	// Takes a context and GetCartItemParams struct as arguments
	// Returns a GetCartItemRow struct and error or nil if successful
	row := q.db.QueryRow(ctx, GetCartItem, arg.Bid, arg.Iid, arg.Vid) 
	var i GetCartItemRow 
	err := row.Scan(&i.Bid, &i.Iid, &i.Vid) 
	return i, err 
}

const GetCartItemsForBuyer = `-- name: GetCartItemsForBuyer :many
select
    vendor.name as vendor_name,
    item.name,
    item.cost,
    item.pictureurl,
    cart.quantity,
    cart.added_time,
    item.iid,
    item.vid 
from
    cart
left join vendor on
    vendor.uid = cart.vid
left join item on
    item.iid = cart.iid
where
    cart.bid = $1
order by
    added_time desc
`
// Defines a constant containing the SQL query to get all cart items for a buyer
// The :many annotation indicates this query returns multiple rows
// The query joins the cart, vendor, and item tables

type GetCartItemsForBuyerRow struct {
	VendorName *string          `json:"vendor_name"`
	Name       *string          `json:"name"`        
	Cost       pgtype.Numeric   `json:"cost"`        
	Pictureurl *string          `json:"pictureurl"`
	Quantity   int32            `json:"quantity"`
	AddedTime  pgtype.Timestamp `json:"added_time"`  
	Iid        pgtype.UUID      `json:"iid"`         
	Vid        pgtype.UUID      `json:"vid"`         
}
// Defines a struct to hold the rows returned by the GetCartItemsForBuyer function

func (q *Queries) GetCartItemsForBuyer(ctx context.Context, bid pgtype.UUID) ([]GetCartItemsForBuyerRow, error) {
	// Method that gets all cart items for a buyer
	// Takes a context and buyer ID as arguments
	// Returns a slice of GetCartItemsForBuyerRow structs and error or nil if successful
	rows, err := q.db.Query(ctx, GetCartItemsForBuyer, bid) 
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCartItemsForBuyerRow{}
	for rows.Next() { 
		var i GetCartItemsForBuyerRow
		if err := rows.Scan(
			&i.VendorName, 
			&i.Name,
			&i.Cost,       
			&i.Pictureurl,
			&i.Quantity,  
			&i.AddedTime,
			&i.Iid,        
			&i.Vid,        
		); err != nil {
			return nil, err 
		}
		items = append(items, i)
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil 
}

const GetItemById = `-- name: GetItemById :one
select iid, vid, name, pictureurl, description, category, quantity, cost from item where iid = $1
`
// Defines a constant containing the SQL query to get an item by ID
// The :one annotation indicates this query returns a single row

func (q *Queries) GetItemById(ctx context.Context, iid pgtype.UUID) (Item, error) {
	// Method that gets an item by ID
	// Takes a context and item ID as arguments
	// Returns an Item struct and error or nil if successful
	row := q.db.QueryRow(ctx, GetItemById, iid) 
	var i Item 
	err := row.Scan(
		&i.Iid,         
		&i.Vid,        
		&i.Name,        
		&i.Pictureurl,  
		&i.Description,
		&i.Category,
		&i.Quantity,   
		&i.Cost,       
	)
	return i, err
}

const GetItemByIdWithVendorInfo = `-- name: GetItemByIdWithVendorInfo :one
select
    iid,
    vid,
    i."name" as name,
    pictureurl,
    description,
    "category",
    quantity,
    cost,
    v."name" as vendor_name,
    v.logo as vendor_logo,
    u.email as vendor_email
from
    item i
join vendor v on
    v.uid = i.vid
join "user" u on
    u.uid = v.uid
where
    iid = $1
`
// Defines a constant containing the SQL query to get an item by ID with vendor information
// The :one annotation indicates this query returns a single row
// The query joins the item, vendor, and user tables

type GetItemByIdWithVendorInfoRow struct {
	Iid         pgtype.UUID    `json:"iid"`
	Vid         pgtype.UUID    `json:"vid"`          
	Name        string         `json:"name"`         
	Pictureurl  *string        `json:"pictureurl"`   
	Description *string        `json:"description"`
	Category    Category       `json:"category"`     
	Quantity    int32          `json:"quantity"`     
	Cost        pgtype.Numeric `json:"cost"`        
	VendorName  string         `json:"vendor_name"`  
	VendorLogo  *string        `json:"vendor_logo"`  
	VendorEmail string         `json:"vendor_email"` 
}
// Defines a struct to hold the row returned by the GetItemByIdWithVendorInfo function

func (q *Queries) GetItemByIdWithVendorInfo(ctx context.Context, iid pgtype.UUID) (GetItemByIdWithVendorInfoRow, error) {
	// Method that gets an item by ID with vendor information
	// Takes a context and item ID as arguments
	// Returns a GetItemByIdWithVendorInfoRow struct and error or nil if successful
	row := q.db.QueryRow(ctx, GetItemByIdWithVendorInfo, iid)
	var i GetItemByIdWithVendorInfoRow 
	err := row.Scan(
		&i.Iid,
		&i.Vid,        
		&i.Name,        
		&i.Pictureurl,  
		&i.Description,
		&i.Category,    
		&i.Quantity,
		&i.Cost,
		&i.VendorName,
		&i.VendorLogo,
		&i.VendorEmail, 
	)
	return i, err 
}

const GetItemByName = `-- name: GetItemByName :one
select iid, vid, name, pictureurl, description, category, quantity, cost from item where name like $1
`
// Defines a constant containing the SQL query to get an item by name
// The :one annotation indicates this query returns a single row

func (q *Queries) GetItemByName(ctx context.Context, name string) (Item, error) {
	// Method that gets an item by name
	// Takes a context and name as arguments
	// Returns an Item struct and error or nil if successful
	row := q.db.QueryRow(ctx, GetItemByName, name) 
	var i Item
	err := row.Scan(
		&i.Iid,         
		&i.Vid,         
		&i.Name,       
		&i.Pictureurl,  
		&i.Description, 
		&i.Category,    
		&i.Quantity,    
		&i.Cost,        
	)
	return i, err
}

const GetItemsByVendorId = `-- name: GetItemsByVendorId :many
select iid, vid, name, pictureurl, description, category, quantity, cost from "item" where vid = $1
`
// Defines a constant containing the SQL query to get all items for a vendor
// The :many annotation indicates this query returns multiple rows

func (q *Queries) GetItemsByVendorId(ctx context.Context, vid pgtype.UUID) ([]Item, error) {
	// Method that gets all items for a vendor
	// Takes a context and vendor ID as arguments
	// Returns a slice of Item structs and error or nil if successful
	rows, err := q.db.Query(ctx, GetItemsByVendorId, vid)
	if err != nil {
		return nil, err 
	}
	defer rows.Close() 
	items := []Item{}
	for rows.Next() { 
		var i Item 
		if err := rows.Scan(
			&i.Iid,
			&i.Vid,         
			&i.Name,
			&i.Pictureurl,  
			&i.Description, 
			&i.Category,    
			&i.Quantity,    
			&i.Cost,        
		); err != nil {
			return nil, err 
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err 
	}
	return items, nil 
}

const GetTotalSales = `-- name: GetTotalSales :one
select coalesce(sum(amt)::decimal(12, 2), 0) from transaction
where vid = $1
`
// Defines a constant containing the SQL query to get total sales for a vendor
// The :one annotation indicates this query returns a single row
// The query uses coalesce to return 0 if there are no sales

func (q *Queries) GetTotalSales(ctx context.Context, vid pgtype.UUID) (interface{}, error) {
	// Method that gets total sales for a vendor
	// Takes a context and vendor ID as arguments
	// Returns the total sales as an interface{} and error or nil if successful
	row := q.db.QueryRow(ctx, GetTotalSales, vid) 
	var coalesce interface{} 
	err := row.Scan(&coalesce) 
	return coalesce, err 
}

const GetTotalSalesForItem = `-- name: GetTotalSalesForItem :one
select coalesce(sum(amt)::decimal(12, 2), 0) from transaction
where vid = $1 and iid = $2
`
// Defines a constant containing the SQL query to get total sales for a specific item
// The :one annotation indicates this query returns a single row
// The query uses coalesce to return 0 if there are no sales

type GetTotalSalesForItemParams struct {
	Vid pgtype.UUID `json:"vid"`
	Iid pgtype.UUID `json:"iid"` 
}
// Defines a struct to hold parameters for the GetTotalSalesForItem function

func (q *Queries) GetTotalSalesForItem(ctx context.Context, arg GetTotalSalesForItemParams) (interface{}, error) {
	// Method that gets total sales for a specific item
	// Takes a context and GetTotalSalesForItemParams struct as arguments
	// Returns the total sales as an interface{} and error or nil if successful
	row := q.db.QueryRow(ctx, GetTotalSalesForItem, arg.Vid, arg.Iid) 
	var coalesce interface{} 
	err := row.Scan(&coalesce) 
	return coalesce, err 
}

const GetTransactionsForVendor = `-- name: GetTransactionsForVendor :many
select item.name, amt, t_time from transaction 
left join item on item.iid = transaction.iid
where transaction.vid = $1 
order by t_time desc
`
// Defines a constant containing the SQL query to get all transactions for a vendor
// The :many annotation indicates this query returns multiple rows
// The query joins the transaction and item tables
// Results are ordered by transaction time in descending order (newest first)

type GetTransactionsForVendorRow struct {
	Name  *string          `json:"name"`   
	Amt   pgtype.Numeric   `json:"amt"`    
	TTime pgtype.Timestamp `json:"t_time"` 
}
func (q *Queries) GetTransactionsForVendor(ctx context.Context, vid pgtype.UUID) ([]GetTransactionsForVendorRow, error) {
	rows, err := q.db.Query(ctx, GetTransactionsForVendor, vid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTransactionsForVendorRow{}
	for rows.Next() {
		var i GetTransactionsForVendorRow
		if err := rows.Scan(&i.Name, &i.Amt, &i.TTime); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetUserByEmail = `-- name: GetUserByEmail :one
select uid, email, passhash, isadmin from "user" where email like $1 limit 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, GetUserByEmail, email)
	var i User
	err := row.Scan(
		&i.Uid,
		&i.Email,
		&i.Passhash,
		&i.Isadmin,
	)
	return i, err
}

const GetUserById = `-- name: GetUserById :one
select uid, email, passhash, isadmin from "user" where uid = $1 limit 1
`

func (q *Queries) GetUserById(ctx context.Context, uid pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, GetUserById, uid)
	var i User
	err := row.Scan(
		&i.Uid,
		&i.Email,
		&i.Passhash,
		&i.Isadmin,
	)
	return i, err
}

const GetVendorByEmail = `-- name: GetVendorByEmail :one
select
    "user".uid,
    email,
    name,
    logo,
    passhash
from
    "user"
inner join vendor on
    "user".uid = vendor.uid
where
    email like $1
limit 1
`

type GetVendorByEmailRow struct {
	Uid      pgtype.UUID `json:"uid"`
	Email    string      `json:"email"`
	Name     string      `json:"name"`
	Logo     *string     `json:"logo"`
	Passhash string      `json:"passhash"`
}

func (q *Queries) GetVendorByEmail(ctx context.Context, email string) (GetVendorByEmailRow, error) {
	row := q.db.QueryRow(ctx, GetVendorByEmail, email)
	var i GetVendorByEmailRow
	err := row.Scan(
		&i.Uid,
		&i.Email,
		&i.Name,
		&i.Logo,
		&i.Passhash,
	)
	return i, err
}

const GetVendorById = `-- name: GetVendorById :one
select
    "user".uid,
    email,
    name,
    logo,
    passhash
from
    "user"
inner join vendor on
    "user".uid = vendor.uid
where
    "user".uid = $1
limit 1
`

type GetVendorByIdRow struct {
	Uid      pgtype.UUID `json:"uid"`
	Email    string      `json:"email"`
	Name     string      `json:"name"`
	Logo     *string     `json:"logo"`
	Passhash string      `json:"passhash"`
}

func (q *Queries) GetVendorById(ctx context.Context, uid pgtype.UUID) (GetVendorByIdRow, error) {
	row := q.db.QueryRow(ctx, GetVendorById, uid)
	var i GetVendorByIdRow
	err := row.Scan(
		&i.Uid,
		&i.Email,
		&i.Name,
		&i.Logo,
		&i.Passhash,
	)
	return i, err
}

const InsertBuyer = `-- name: InsertBuyer :exec
insert into buyer (uid, name) values ($1, $2)
`

type InsertBuyerParams struct {
	Uid  pgtype.UUID `json:"uid"`
	Name string      `json:"name"`
}

func (q *Queries) InsertBuyer(ctx context.Context, arg InsertBuyerParams) error {
	_, err := q.db.Exec(ctx, InsertBuyer, arg.Uid, arg.Name)
	return err
}

const InsertItem = `-- name: InsertItem :one
insert into item (vid, name, pictureurl, description, category, quantity, cost) values ($1, $2, $3, $4, $5, $6, $7) returning iid
`

type InsertItemParams struct {
	Vid         pgtype.UUID    `json:"vid"`
	Name        string         `json:"name"`
	Pictureurl  *string        `json:"pictureurl"`
	Description *string        `json:"description"`
	Category    Category       `json:"category"`
	Quantity    int32          `json:"quantity"`
	Cost        pgtype.Numeric `json:"cost"`
}

func (q *Queries) InsertItem(ctx context.Context, arg InsertItemParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, InsertItem,
		arg.Vid,
		arg.Name,
		arg.Pictureurl,
		arg.Description,
		arg.Category,
		arg.Quantity,
		arg.Cost,
	)
	var iid pgtype.UUID
	err := row.Scan(&iid)
	return iid, err
}

const InsertUser = `-- name: InsertUser :one
insert into "user" (email, passhash) values ($1, $2) returning uid
`

type InsertUserParams struct {
	Email    string `json:"email"`
	Passhash string `json:"passhash"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, InsertUser, arg.Email, arg.Passhash)
	var uid pgtype.UUID
	err := row.Scan(&uid)
	return uid, err
}

const InsertVendor = `-- name: InsertVendor :exec
insert into vendor (uid, name) values ($1, $2)
`

type InsertVendorParams struct {
	Uid  pgtype.UUID `json:"uid"`
	Name string      `json:"name"`
}

func (q *Queries) InsertVendor(ctx context.Context, arg InsertVendorParams) error {
	_, err := q.db.Exec(ctx, InsertVendor, arg.Uid, arg.Name)
	return err
}

const ReduceQuantityOfItem = `-- name: ReduceQuantityOfItem :exec
update item set quantity = quantity - $3
where iid = $1
and vid = $2
`

type ReduceQuantityOfItemParams struct {
	Iid      pgtype.UUID `json:"iid"`
	Vid      pgtype.UUID `json:"vid"`
	Quantity int32       `json:"quantity"`
}

func (q *Queries) ReduceQuantityOfItem(ctx context.Context, arg ReduceQuantityOfItemParams) error {
	_, err := q.db.Exec(ctx, ReduceQuantityOfItem, arg.Iid, arg.Vid, arg.Quantity)
	return err
}

const UpdateBuyer = `-- name: UpdateBuyer :exec
with updated_user as (
    update "user"
    set 
    email = $2
    where "user".uid = $3
    returning uid
)
update buyer
set
name = $1
where uid in (select uid from updated_user)
`

type UpdateBuyerParams struct {
	Name  string      `json:"name"`
	Email string      `json:"email"`
	Uid   pgtype.UUID `json:"uid"`
}

func (q *Queries) UpdateBuyer(ctx context.Context, arg UpdateBuyerParams) error {
	_, err := q.db.Exec(ctx, UpdateBuyer, arg.Name, arg.Email, arg.Uid)
	return err
}

const UpdateItem = `-- name: UpdateItem :exec
update item set name = $1,  description = $2, cost = $3, pictureurl = $4, category = $5, quantity = $6 
where iid = $7
and vid = $8
`

type UpdateItemParams struct {
	Name        string         `json:"name"`
	Description *string        `json:"description"`
	Cost        pgtype.Numeric `json:"cost"`
	Pictureurl  *string        `json:"pictureurl"`
	Category    Category       `json:"category"`
	Quantity    int32          `json:"quantity"`
	Iid         pgtype.UUID    `json:"iid"`
	Vid         pgtype.UUID    `json:"vid"`
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) error {
	_, err := q.db.Exec(ctx, UpdateItem,
		arg.Name,
		arg.Description,
		arg.Cost,
		arg.Pictureurl,
		arg.Category,
		arg.Quantity,
		arg.Iid,
		arg.Vid,
	)
	return err
}

const UpdateQuantityOfCartItem = `-- name: UpdateQuantityOfCartItem :exec
update cart set quantity = $4
where bid = $1 and iid = $2 and vid = $3
`

type UpdateQuantityOfCartItemParams struct {
	Bid      pgtype.UUID `json:"bid"`
	Iid      pgtype.UUID `json:"iid"`
	Vid      pgtype.UUID `json:"vid"`
	Quantity int32       `json:"quantity"`
}

func (q *Queries) UpdateQuantityOfCartItem(ctx context.Context, arg UpdateQuantityOfCartItemParams) error {
	_, err := q.db.Exec(ctx, UpdateQuantityOfCartItem,
		arg.Bid,
		arg.Iid,
		arg.Vid,
		arg.Quantity,
	)
	return err
}

const UpdateVendor = `-- name: UpdateVendor :exec
with updated_user as (
    update "user"
    set 
    email = $3
    where "user".uid = $4
    returning uid
)
update vendor
set
name = $1,
logo = $2
where uid in (select uid from updated_user)
`

type UpdateVendorParams struct {
	Name  string      `json:"name"`
	Logo  *string     `json:"logo"`
	Email string      `json:"email"`
	Uid   pgtype.UUID `json:"uid"`
}

func (q *Queries) UpdateVendor(ctx context.Context, arg UpdateVendorParams) error {
	_, err := q.db.Exec(ctx, UpdateVendor,
		arg.Name,
		arg.Logo,
		arg.Email,
		arg.Uid,
	)
	return err
}
