// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateTransaction = `-- name: CreateTransaction :one
insert into transaction (bid, vid, iid, amt, t_time) values($1, $2, $3, $4, now()) returning tid
`

type CreateTransactionParams struct {
	Bid pgtype.UUID    `json:"bid"`
	Vid pgtype.UUID    `json:"vid"`
	Iid pgtype.UUID    `json:"iid"`
	Amt pgtype.Numeric `json:"amt"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, CreateTransaction,
		arg.Bid,
		arg.Vid,
		arg.Iid,
		arg.Amt,
	)
	var tid pgtype.UUID
	err := row.Scan(&tid)
	return tid, err
}

const DbVersion = `-- name: DbVersion :one
select version()
`

func (q *Queries) DbVersion(ctx context.Context) (string, error) {
	row := q.db.QueryRow(ctx, DbVersion)
	var version string
	err := row.Scan(&version)
	return version, err
}

const DeleteItem = `-- name: DeleteItem :exec
delete from item where iid = $1
`

func (q *Queries) DeleteItem(ctx context.Context, iid pgtype.UUID) error {
	_, err := q.db.Exec(ctx, DeleteItem, iid)
	return err
}

const DeleteUser = `-- name: DeleteUser :exec
delete from "user" where uid = $1
`

func (q *Queries) DeleteUser(ctx context.Context, uid pgtype.UUID) error {
	_, err := q.db.Exec(ctx, DeleteUser, uid)
	return err
}

const GetAllItems = `-- name: GetAllItems :many
select iid, vid, name, pictureurl, description, category, quantity, cost from "item"
`

func (q *Queries) GetAllItems(ctx context.Context) ([]Item, error) {
	rows, err := q.db.Query(ctx, GetAllItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Item{}
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.Iid,
			&i.Vid,
			&i.Name,
			&i.Pictureurl,
			&i.Description,
			&i.Category,
			&i.Quantity,
			&i.Cost,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetBuyerByEmail = `-- name: GetBuyerByEmail :one
select
    "user".uid,
    email,
    name,
    passhash
from
    "user"
inner join buyer on
    "user".uid = buyer.uid
where
    email like $1
limit 1
`

type GetBuyerByEmailRow struct {
	Uid      pgtype.UUID `json:"uid"`
	Email    string      `json:"email"`
	Name     string      `json:"name"`
	Passhash string      `json:"passhash"`
}

func (q *Queries) GetBuyerByEmail(ctx context.Context, email string) (GetBuyerByEmailRow, error) {
	row := q.db.QueryRow(ctx, GetBuyerByEmail, email)
	var i GetBuyerByEmailRow
	err := row.Scan(
		&i.Uid,
		&i.Email,
		&i.Name,
		&i.Passhash,
	)
	return i, err
}

const GetBuyerById = `-- name: GetBuyerById :one
select
    "user".uid,
    email,
    name,
    passhash
from
    "user"
inner join buyer on
    "user".uid = buyer.uid
where
    "user".uid = $1
limit 1
`

type GetBuyerByIdRow struct {
	Uid      pgtype.UUID `json:"uid"`
	Email    string      `json:"email"`
	Name     string      `json:"name"`
	Passhash string      `json:"passhash"`
}

func (q *Queries) GetBuyerById(ctx context.Context, uid pgtype.UUID) (GetBuyerByIdRow, error) {
	row := q.db.QueryRow(ctx, GetBuyerById, uid)
	var i GetBuyerByIdRow
	err := row.Scan(
		&i.Uid,
		&i.Email,
		&i.Name,
		&i.Passhash,
	)
	return i, err
}

const GetItemById = `-- name: GetItemById :one
select iid, vid, name, pictureurl, description, category, quantity, cost from item where iid = $1
`

func (q *Queries) GetItemById(ctx context.Context, iid pgtype.UUID) (Item, error) {
	row := q.db.QueryRow(ctx, GetItemById, iid)
	var i Item
	err := row.Scan(
		&i.Iid,
		&i.Vid,
		&i.Name,
		&i.Pictureurl,
		&i.Description,
		&i.Category,
		&i.Quantity,
		&i.Cost,
	)
	return i, err
}

const GetItemByName = `-- name: GetItemByName :one
select iid, vid, name, pictureurl, description, category, quantity, cost from item where name like $1
`

func (q *Queries) GetItemByName(ctx context.Context, name string) (Item, error) {
	row := q.db.QueryRow(ctx, GetItemByName, name)
	var i Item
	err := row.Scan(
		&i.Iid,
		&i.Vid,
		&i.Name,
		&i.Pictureurl,
		&i.Description,
		&i.Category,
		&i.Quantity,
		&i.Cost,
	)
	return i, err
}

const GetItemsByVendorId = `-- name: GetItemsByVendorId :many
select iid, vid, name, pictureurl, description, category, quantity, cost from "item" where vid = $1
`

func (q *Queries) GetItemsByVendorId(ctx context.Context, vid pgtype.UUID) ([]Item, error) {
	rows, err := q.db.Query(ctx, GetItemsByVendorId, vid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Item{}
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.Iid,
			&i.Vid,
			&i.Name,
			&i.Pictureurl,
			&i.Description,
			&i.Category,
			&i.Quantity,
			&i.Cost,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTotalSales = `-- name: GetTotalSales :one
select coalesce(sum(amt)::decimal(12, 2), 0) from transaction
where vid = $1
`

func (q *Queries) GetTotalSales(ctx context.Context, vid pgtype.UUID) (interface{}, error) {
	row := q.db.QueryRow(ctx, GetTotalSales, vid)
	var coalesce interface{}
	err := row.Scan(&coalesce)
	return coalesce, err
}

const GetTotalSalesForItem = `-- name: GetTotalSalesForItem :one
select coalesce(sum(amt)::decimal(12, 2), 0) from transaction
where vid = $1 and iid = $2
`

type GetTotalSalesForItemParams struct {
	Vid pgtype.UUID `json:"vid"`
	Iid pgtype.UUID `json:"iid"`
}

func (q *Queries) GetTotalSalesForItem(ctx context.Context, arg GetTotalSalesForItemParams) (interface{}, error) {
	row := q.db.QueryRow(ctx, GetTotalSalesForItem, arg.Vid, arg.Iid)
	var coalesce interface{}
	err := row.Scan(&coalesce)
	return coalesce, err
}

const GetTransactionsForVendor = `-- name: GetTransactionsForVendor :many
select item.name, amt, t_time from transaction 
left join item on item.iid = transaction.iid
where transaction.vid = $1 
order by t_time desc
`

type GetTransactionsForVendorRow struct {
	Name  *string          `json:"name"`
	Amt   pgtype.Numeric   `json:"amt"`
	TTime pgtype.Timestamp `json:"t_time"`
}

func (q *Queries) GetTransactionsForVendor(ctx context.Context, vid pgtype.UUID) ([]GetTransactionsForVendorRow, error) {
	rows, err := q.db.Query(ctx, GetTransactionsForVendor, vid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTransactionsForVendorRow{}
	for rows.Next() {
		var i GetTransactionsForVendorRow
		if err := rows.Scan(&i.Name, &i.Amt, &i.TTime); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetUserByEmail = `-- name: GetUserByEmail :one
select uid, email, passhash, isadmin from "user" where email like $1 limit 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, GetUserByEmail, email)
	var i User
	err := row.Scan(
		&i.Uid,
		&i.Email,
		&i.Passhash,
		&i.Isadmin,
	)
	return i, err
}

const GetUserById = `-- name: GetUserById :one
select uid, email, passhash, isadmin from "user" where uid = $1 limit 1
`

func (q *Queries) GetUserById(ctx context.Context, uid pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, GetUserById, uid)
	var i User
	err := row.Scan(
		&i.Uid,
		&i.Email,
		&i.Passhash,
		&i.Isadmin,
	)
	return i, err
}

const GetVendorByEmail = `-- name: GetVendorByEmail :one
select
    "user".uid,
    email,
    name,
    logo,
    passhash
from
    "user"
inner join vendor on
    "user".uid = vendor.uid
where
    email like $1
limit 1
`

type GetVendorByEmailRow struct {
	Uid      pgtype.UUID `json:"uid"`
	Email    string      `json:"email"`
	Name     string      `json:"name"`
	Logo     *string     `json:"logo"`
	Passhash string      `json:"passhash"`
}

func (q *Queries) GetVendorByEmail(ctx context.Context, email string) (GetVendorByEmailRow, error) {
	row := q.db.QueryRow(ctx, GetVendorByEmail, email)
	var i GetVendorByEmailRow
	err := row.Scan(
		&i.Uid,
		&i.Email,
		&i.Name,
		&i.Logo,
		&i.Passhash,
	)
	return i, err
}

const GetVendorById = `-- name: GetVendorById :one
select
    "user".uid,
    email,
    name,
    logo,
    passhash
from
    "user"
inner join vendor on
    "user".uid = vendor.uid
where
    "user".uid = $1
limit 1
`

type GetVendorByIdRow struct {
	Uid      pgtype.UUID `json:"uid"`
	Email    string      `json:"email"`
	Name     string      `json:"name"`
	Logo     *string     `json:"logo"`
	Passhash string      `json:"passhash"`
}

func (q *Queries) GetVendorById(ctx context.Context, uid pgtype.UUID) (GetVendorByIdRow, error) {
	row := q.db.QueryRow(ctx, GetVendorById, uid)
	var i GetVendorByIdRow
	err := row.Scan(
		&i.Uid,
		&i.Email,
		&i.Name,
		&i.Logo,
		&i.Passhash,
	)
	return i, err
}

const InsertBuyer = `-- name: InsertBuyer :exec
insert into buyer (uid, name) values ($1, $2)
`

type InsertBuyerParams struct {
	Uid  pgtype.UUID `json:"uid"`
	Name string      `json:"name"`
}

func (q *Queries) InsertBuyer(ctx context.Context, arg InsertBuyerParams) error {
	_, err := q.db.Exec(ctx, InsertBuyer, arg.Uid, arg.Name)
	return err
}

const InsertItem = `-- name: InsertItem :one
insert into item (vid, name, pictureurl, description, category, quantity, cost) values ($1, $2, $3, $4, $5, $6, $7) returning iid
`

type InsertItemParams struct {
	Vid         pgtype.UUID    `json:"vid"`
	Name        string         `json:"name"`
	Pictureurl  *string        `json:"pictureurl"`
	Description *string        `json:"description"`
	Category    Category       `json:"category"`
	Quantity    int32          `json:"quantity"`
	Cost        pgtype.Numeric `json:"cost"`
}

func (q *Queries) InsertItem(ctx context.Context, arg InsertItemParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, InsertItem,
		arg.Vid,
		arg.Name,
		arg.Pictureurl,
		arg.Description,
		arg.Category,
		arg.Quantity,
		arg.Cost,
	)
	var iid pgtype.UUID
	err := row.Scan(&iid)
	return iid, err
}

const InsertUser = `-- name: InsertUser :one
insert into "user" (email, passhash) values ($1, $2) returning uid
`

type InsertUserParams struct {
	Email    string `json:"email"`
	Passhash string `json:"passhash"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, InsertUser, arg.Email, arg.Passhash)
	var uid pgtype.UUID
	err := row.Scan(&uid)
	return uid, err
}

const InsertVendor = `-- name: InsertVendor :exec
insert into vendor (uid, name) values ($1, $2)
`

type InsertVendorParams struct {
	Uid  pgtype.UUID `json:"uid"`
	Name string      `json:"name"`
}

func (q *Queries) InsertVendor(ctx context.Context, arg InsertVendorParams) error {
	_, err := q.db.Exec(ctx, InsertVendor, arg.Uid, arg.Name)
	return err
}

const UpdateBuyer = `-- name: UpdateBuyer :exec
with updated_user as (
    update "user"
    set 
    email = $2
    where "user".uid = $3
    returning uid
)
update buyer
set
name = $1
where uid in (select uid from updated_user)
`

type UpdateBuyerParams struct {
	Name  string      `json:"name"`
	Email string      `json:"email"`
	Uid   pgtype.UUID `json:"uid"`
}

func (q *Queries) UpdateBuyer(ctx context.Context, arg UpdateBuyerParams) error {
	_, err := q.db.Exec(ctx, UpdateBuyer, arg.Name, arg.Email, arg.Uid)
	return err
}

const UpdateItem = `-- name: UpdateItem :exec
update item set name = $1,  description = $2, cost = $3, pictureurl = $4, category = $5, quantity = $6 
where iid = $7
and vid = $8
`

type UpdateItemParams struct {
	Name        string         `json:"name"`
	Description *string        `json:"description"`
	Cost        pgtype.Numeric `json:"cost"`
	Pictureurl  *string        `json:"pictureurl"`
	Category    Category       `json:"category"`
	Quantity    int32          `json:"quantity"`
	Iid         pgtype.UUID    `json:"iid"`
	Vid         pgtype.UUID    `json:"vid"`
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) error {
	_, err := q.db.Exec(ctx, UpdateItem,
		arg.Name,
		arg.Description,
		arg.Cost,
		arg.Pictureurl,
		arg.Category,
		arg.Quantity,
		arg.Iid,
		arg.Vid,
	)
	return err
}

const UpdateVendor = `-- name: UpdateVendor :exec
with updated_user as (
    update "user"
    set 
    email = $3
    where "user".uid = $4
    returning uid
)
update vendor
set
name = $1,
logo = $2
where uid in (select uid from updated_user)
`

type UpdateVendorParams struct {
	Name  string      `json:"name"`
	Logo  *string     `json:"logo"`
	Email string      `json:"email"`
	Uid   pgtype.UUID `json:"uid"`
}

func (q *Queries) UpdateVendor(ctx context.Context, arg UpdateVendorParams) error {
	_, err := q.db.Exec(ctx, UpdateVendor,
		arg.Name,
		arg.Logo,
		arg.Email,
		arg.Uid,
	)
	return err
}
