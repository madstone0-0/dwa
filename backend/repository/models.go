// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

// AccType defines the type for account types used in the system (e.g., MOMO, BANK)
type AccType string

// Constants representing valid account types
const (
	AccTypeMOMO AccType = "MOMO"
	AccTypeBANK AccType = "BANK"
)

// Scan implements the sql.Scanner interface for AccType
// It converts database types to the AccType Go type
func (e *AccType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccType(s)
	case string:
		*e = AccType(s)
	default:
		return fmt.Errorf("unsupported scan type for AccType: %T", src)
	}
	return nil
}

// NullAccType represents a nullable version of AccType for use with SQL NULL values
type NullAccType struct {
	AccType AccType `json:"acc_type"`
	Valid   bool    `json:"valid"` // Valid is true if AccType is not NULL
}

// Scan implements the sql.Scanner interface for NullAccType
// It allows scanning from a SQL value to NullAccType
func (ns *NullAccType) Scan(value interface{}) error {
	if value == nil {
		ns.AccType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccType.Scan(value)
}

// Value implements the driver.Valuer interface for NullAccType
// It allows converting a NullAccType to a driver.Value for writing to the database
func (ns NullAccType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccType), nil
}

// Category defines the type for item categories in the system
type Category string

// Constants representing valid item categories
const (
	CategoryFASHION       Category = "FASHION"
	CategoryELECTRONICS   Category = "ELECTRONICS"
	CategorySERVICES      Category = "SERVICES"
	CategoryBOOKSSUPPLIES Category = "BOOKS_SUPPLIES"
)

// Scan implements the sql.Scanner interface for Category
// It converts database types to the Category Go type
func (e *Category) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Category(s)
	case string:
		*e = Category(s)
	default:
		return fmt.Errorf("unsupported scan type for Category: %T", src)
	}
	return nil
}

// NullCategory represents a nullable version of Category for use with SQL NULL values
type NullCategory struct {
	Category Category `json:"category"`
	Valid    bool     `json:"valid"` // Valid is true if Category is not NULL
}

// Scan implements the sql.Scanner interface for NullCategory
func (ns *NullCategory) Scan(value interface{}) error {
	if value == nil {
		ns.Category, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Category.Scan(value)
}

// Value implements the driver.Valuer interface for NullCategory
func (ns NullCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Category), nil
}

// Account represents a vendor or buyer's financial account information
type Account struct {
	Uid          pgtype.UUID `json:"uid"`          // User ID
	Accounttype  AccType     `json:"accounttype"`  // Type of account (MOMO or BANK)
	Bankname     *string     `json:"bankname"`     // Optional bank name if account is BANK
	Momoprovider *string     `json:"momoprovider"` // Optional momo provider if account is MOMO
}

// Buyer represents a buyer in the marketplace
type Buyer struct {
	Uid  pgtype.UUID `json:"uid"`  // Unique buyer ID
	Name string      `json:"name"` // Buyer's name
}

// Cart represents a buyer's shopping cart entry
type Cart struct {
	Bid       pgtype.UUID      `json:"bid"`        // Buyer ID
	Iid       pgtype.UUID      `json:"iid"`        // Item ID
	Vid       pgtype.UUID      `json:"vid"`        // Vendor ID
	Quantity  int32            `json:"quantity"`   // Quantity of item added
	AddedTime pgtype.Timestamp `json:"added_time"` // Time the item was added
}

// Item represents a product listed by a vendor
type Item struct {
	Iid         pgtype.UUID    `json:"iid"`         // Item ID
	Vid         pgtype.UUID    `json:"vid"`         // Vendor ID
	Name        string         `json:"name"`        // Name of the item
	Pictureurl  *string        `json:"pictureurl"`  // Optional image URL
	Description *string        `json:"description"` // Optional description
	Category    Category       `json:"category"`    // Category of the item
	Quantity    int32          `json:"quantity"`    // Quantity available
	Cost        pgtype.Numeric `json:"cost"`        // Price per unit
}

// Transaction represents a purchase transaction between buyer and vendor
type Transaction struct {
	Tid       pgtype.UUID      `json:"tid"`        // Transaction ID
	Bid       pgtype.UUID      `json:"bid"`        // Buyer ID
	Vid       pgtype.UUID      `json:"vid"`        // Vendor ID
	Iid       pgtype.UUID      `json:"iid"`        // Item ID
	Amt       pgtype.Numeric   `json:"amt"`        // Total amount
	QtyBought int32            `json:"qty_bought"` // Quantity purchased
	TTime     pgtype.Timestamp `json:"t_time"`     // Transaction time
}

// User represents a platform user (buyer or vendor)
type User struct {
	Uid      pgtype.UUID `json:"uid"`      // User ID
	Email    string      `json:"email"`    // Email address
	Passhash string      `json:"passhash"` // Password hash
	Isadmin  *bool       `json:"isadmin"`  // Optional: true if user is an admin
}

// Vendor represents a vendor in the system
type Vendor struct {
	Uid  pgtype.UUID `json:"uid"`  // Vendor ID
	Name string      `json:"name"` // Vendor name
	Logo *string     `json:"logo"` // Optional vendor logo URL
}
