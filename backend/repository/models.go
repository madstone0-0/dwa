// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package repository

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AccType string

const (
	AccTypeMOMO AccType = "MOMO"
	AccTypeBANK AccType = "BANK"
)

func (e *AccType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccType(s)
	case string:
		*e = AccType(s)
	default:
		return fmt.Errorf("unsupported scan type for AccType: %T", src)
	}
	return nil
}

type NullAccType struct {
	AccType AccType `json:"acc_type"`
	Valid   bool    `json:"valid"` // Valid is true if AccType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccType) Scan(value interface{}) error {
	if value == nil {
		ns.AccType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccType), nil
}

type Category string

const (
	CategoryFASHION       Category = "FASHION"
	CategoryELECTRONICS   Category = "ELECTRONICS"
	CategorySERVICES      Category = "SERVICES"
	CategoryBOOKSSUPPLIES Category = "BOOKS_SUPPLIES"
)

func (e *Category) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Category(s)
	case string:
		*e = Category(s)
	default:
		return fmt.Errorf("unsupported scan type for Category: %T", src)
	}
	return nil
}

type NullCategory struct {
	Category Category `json:"category"`
	Valid    bool     `json:"valid"` // Valid is true if Category is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCategory) Scan(value interface{}) error {
	if value == nil {
		ns.Category, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Category.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Category), nil
}

type Account struct {
	Uid          pgtype.UUID `json:"uid"`
	Accounttype  AccType     `json:"accounttype"`
	Bankname     *string     `json:"bankname"`
	Momoprovider *string     `json:"momoprovider"`
}

type Buyer struct {
	Uid  pgtype.UUID `json:"uid"`
	Name string      `json:"name"`
}

type Item struct {
	Iid         pgtype.UUID    `json:"iid"`
	Vid         pgtype.UUID    `json:"vid"`
	Name        string         `json:"name"`
	Pictureurl  *string        `json:"pictureurl"`
	Description *string        `json:"description"`
	Category    Category       `json:"category"`
	Quantity    int32          `json:"quantity"`
	Cost        pgtype.Numeric `json:"cost"`
}

type Transaction struct {
	Tid       pgtype.UUID      `json:"tid"`
	Bid       pgtype.UUID      `json:"bid"`
	Vid       pgtype.UUID      `json:"vid"`
	Iid       pgtype.UUID      `json:"iid"`
	Amt       pgtype.Numeric   `json:"amt"`
	QtyBought int32            `json:"qty_bought"`
	TTime     pgtype.Timestamp `json:"t_time"`
}

type User struct {
	Uid      pgtype.UUID `json:"uid"`
	Email    string      `json:"email"`
	Passhash string      `json:"passhash"`
	Isadmin  *bool       `json:"isadmin"`
}

type Vendor struct {
	Uid  pgtype.UUID `json:"uid"`
	Name string      `json:"name"`
	Logo *string     `json:"logo"`
}
